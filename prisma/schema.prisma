// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  reservations  Reservation[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Reservation {
  id            String      @id @default(cuid())
  name          String?
  startTime     DateTime
  endTime       DateTime
  userId        String
  status        String
  description   String?
  lectureHallId String
  lectureHall   LectureHall @relation(fields: [lectureHallId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LectureHall {
  id          String        @id @default(cuid())
  name        String?
  capacity    Int // number of people it can fit
  location    String? // e.g, building name, room number
  amenities   String? // e.g, audio-visual equipment, whiteboards etc.
  startTime   DateTime // Start time when the lecture hall is available
  endTime     DateTime // End time when the lecture hall is available
  Reservation Reservation[]
  // available   Boolean? // Indicates whether the hall is currently available
}

// model AvailableTime {
//   id            String        @id @default(cuid())
//   startTime     DateTime
//   endTime       DateTime
//   lectureHall   LectureHall   @relation(fields: [lectureHallId], references: [id])
//   lectureHallId String
//   Reservation   Reservation[]
//   isReserved    Boolean       @default(false) // Indicates whether the time slot is reserved
// }
